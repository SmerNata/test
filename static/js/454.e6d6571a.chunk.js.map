{"version":3,"file":"static/js/454.e6d6571a.chunk.js","mappings":"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","sources":["component/Profile/User/UserStatus/UserStatusHooks.jsx","component/Profile/User/User.jsx","component/Profile/Posts/Post/Post.jsx","component/Profile/Posts/Posts.jsx","component/Profile/Posts/PostsContainer.jsx","component/Profile/Profile.jsx","component/Profile/ProfileContainer.jsx","component/common/FormsControls/FormsControls.jsx","hoc/AuthRedirect.jsx","tools/validators/validator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './UserStatus.css';\r\nconst UserStatusWithHooks = (props) => {\r\n    let [editMode,setEditMode] = useState(false);\r\n    let [status,setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const diactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onBlur={diactivateEditMode} onChange={onStatusChange} value={status} type=\"text\" />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default UserStatusWithHooks;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport './User.css';\r\nimport UserStatusWithHooks from './UserStatus/UserStatusHooks';\r\nconst User = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n    <div className='user'>\r\n      {/*<img className='user__banner' src=\"https://www.gettyimages.pt/gi-resources/images/Homepage/Hero/PT/PT_hero_42_153645159.jpg\" alt=\"\" />*/}\r\n      <div className='user__position'>\r\n        <img className='user__img' src={props.profile.photos.small} alt=\"\" />\r\n        <div className='user__content'>\r\n          <div className='user__name'>{props.profile.fullName}</div>\r\n          <UserStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n          <div className='user__text'>\r\n            Обо мне: {props.profile.aboutMe}<br />\r\n            Статус работы: {props.profile.lookingForAJobDescription}<br />\r\n            Контакты: {props.profile.contacts.facebook} | {props.profile.contacts.instagram} | {props.profile.contacts.twitter} | {props.profile.contacts.vk}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default User;","import React from 'react';\r\nimport './Post.css';\r\nconst Post = (props) => {\r\n  return (\r\n    <div className='post-item'>\r\n      <img className='post-item__img' src=\"https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg\" alt=\"\" />\r\n      <div className='post-item__text'>{props.message}</div>\r\n    </div>\r\n  )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport './Posts.css';\r\nimport Post from './Post/Post';\r\nimport { Field,reduxForm } from 'redux-form';\r\nimport { required,maxLengthCreator,minLength3 } from '../../../tools/validators/validator';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst PostForm = (props) => {\r\n  return (\r\n    <form className='post-form' onSubmit={props.handleSubmit}>\r\n      <Field className='post-form__textarea' \r\n            component={Textarea}\r\n            name=\"postMessage\" \r\n            validate={[required, maxLength30, minLength3]}\r\n            placeholder='your news...' />\r\n      <button className='post-form__button' type=\"submit\">Add post</button>\r\n    </form>\r\n  )\r\n}\r\nconst PostReduxForm = reduxForm({\r\n  form: 'post'\r\n})(PostForm);\r\nconst Posts = (props) => {\r\n  console.log('test');\r\n    let addPost = (values) =>{\r\n      props.addPost(values.postMessage);\r\n    };\r\n    let arPost = props.posts.map(item => (\r\n      <Post message={item.message} />\r\n    ));\r\n    return (\r\n      <div className='posts'>\r\n        <div className='posts__title'>My posts</div>\r\n        <PostReduxForm onSubmit={addPost} />\r\n        <div className='post-list'>\r\n          { arPost }\r\n        </div>\r\n      </div>\r\n    )\r\n};\r\nexport default Posts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport Posts from './Posts';\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (text) => {\r\n      dispatch(addPostActionCreator(text));\r\n    },\r\n  }\r\n}\r\nconst PostsContainer = connect(mapStateToProps,mapDispatchToProps)(Posts);\r\nexport default PostsContainer;","import React from 'react';\r\nimport './Profile.css';\r\nimport User from './User/User';\r\nimport PostsContainer from './Posts/PostsContainer';\r\nconst Profile = (props) => {\r\n  return (\r\n    <div className='profile'>\r\n        <User profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n        <PostsContainer />\r\n    </div>\r\n  )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {useLocation,useNavigate,useParams} from \"react-router-dom\";\r\nimport {getUserProfileThunkCreator,getStatusThunkCreator,updateStatusThunkCreator} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\r\nimport { compose } from 'redux';\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n      let location = useLocation();\r\n      let navigate = useNavigate();\r\n      let params = useParams();\r\n      return (\r\n          <Component\r\n              {...props}\r\n              router={{ location, navigate, params }}\r\n          />\r\n      );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount () {\r\n      let userId = this.props.router.params.userId;\r\n      if (userId == undefined) {\r\n        userId = this.props.loginUserId;\r\n      }\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n          )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n      profile: state.profilePage.profile,\r\n      status: state.profilePage.status,\r\n      loginUserId: state.auth.userId,\r\n  }\r\n}\r\nexport default compose(\r\n  connect(mapStateToProps,\r\n    {getUserProfile: getUserProfileThunkCreator,\r\n    getStatus: getStatusThunkCreator,\r\n    updateStatus: updateStatusThunkCreator}),\r\n  withAuthRedirect\r\n)(withRouter(ProfileContainer));","import React from 'react';\r\nimport './FormsControls.css';\r\nconst FormControl = ({input, meta,...props}) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n      <div className={'form-control '+(hasError && '_error')}>\r\n          {props.children}\r\n          {hasError && <div className='message'>{meta.error}</div>}\r\n      </div>\r\n  )\r\n}\r\nexport const Textarea = (props) => {\r\n  const {input, meta,...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n  )\r\n}\r\nexport const Input = (props) => {\r\n  const {input, meta,...restProps} = props;\r\n  return (\r\n      <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n      </FormControl>\r\n  )\r\n}","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nlet mapStateToPropsRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={\"/login\"} />\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n    return ConnectedRedirectComponent;\r\n}","export const required = (value) => {\r\n    if (value) {\r\n        return undefined;\r\n    } else {\r\n        return 'Field is required';\r\n    }\r\n}\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return 'Max length is '+maxLength+' symbols';\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\nexport const minLength3 = (value) => {\r\n    if (value && value.length < 3) {\r\n        return 'Min length is 3 symbols';\r\n    } else {\r\n        return undefined;\r\n    }\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","type","profile","className","src","photos","small","alt","fullName","aboutMe","lookingForAJobDescription","contacts","facebook","instagram","twitter","vk","Preloader","message","maxLength30","maxLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","minLength3","placeholder","console","log","arPost","posts","map","item","values","addPost","postMessage","connect","state","profilePage","dispatch","text","addPostActionCreator","Posts","Component","ProfileContainer","userId","this","router","params","undefined","loginUserId","getUserProfile","getStatus","React","compose","auth","getUserProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","withAuthRedirect","location","useLocation","navigate","useNavigate","useParams","FormControl","input","meta","hasError","touched","error","children","restProps","Input","mapStateToPropsRedirect","isAuth","RedirectComponent","to","maxLength","length"],"sourceRoot":""}